# For examples, see http://cgit.drupalcode.org/commons/tree/.travis.yml?id=1c8e37d9835c248c3dde8304de30ef2558ae20ef

language: php

php:
  - 5.4

mysql:
  database: drupal
  username: root
  encoding: utf8

env:
  - CORE=7.39

matrix:
  fast_finish: true

install:

  # Add the Google Chrome packages.
  # - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
  # - sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
  - sudo apt-get update > /dev/null

  # Create a database for our Drupal site.
  - "mysql -e 'create database drupal;'"

  # Install the latest Drush 6.
  - export PATH="$HOME/.composer/vendor/bin:$PATH"
  - composer global require --no-interaction --prefer-source drush/drush:6.*@dev

  # Install Drupal.org drush.
  - drush dl -y drupalorg_drush-7.x-1.x-dev --destination=$HOME/.drush
  - drush cc drush

  # Build Behat dependencies
  #- cd ./tests/behat
  #- composer install --prefer-source --no-interaction
  #- cd ../../../

  # Rename the repository folder to 'commons' (to accommodate different repository names).
  # - REPO_NAME=`basename $TRAVIS_REPO_SLUG`
  # - mv $REPO_NAME checkpoint

  # Build Codebase
  - drush dl drupal-$CORE
  - cd drupal-$CORE
  - ln -s $TRAVIS_BUILD_DIR profiles/checkpoint

  # Setup files
  - sudo chmod -R 777 sites/all

  # Setup display for Selenium
  # - export DISPLAY=:99.0
  # - sh -e /etc/init.d/xvfb start
  # - sleep 5

  # Get Chrome and ChromeDriver
  # - sudo apt-get install google-chrome-stable
  # - wget http://chromedriver.storage.googleapis.com/2.9/chromedriver_linux64.zip
  # - unzip -a chromedriver_linux64.zip

  # Insane hack from jsdevel:
  #   https://github.com/jsdevel/travis-debugging/blob/master/shim.bash
  # This allows chrome-sandbox to work in side of OpenVZ, because I can't
  # figure out how to start chrome with --no-sandbox.
  # - export CHROME_SANDBOX=/opt/google/chrome/chrome-sandbox
  # - sudo rm -f $CHROME_SANDBOX
  # - sudo wget https://googledrive.com/host/0B5VlNZ_Rvdw6NTJoZDBSVy1ZdkE -O $CHROME_SANDBOX
  # - sudo chown root:root $CHROME_SANDBOX; sudo chmod 4755 $CHROME_SANDBOX
  # - sudo md5sum $CHROME_SANDBOX

  # Get Selenium
  # - wget http://selenium-release.storage.googleapis.com/2.42/selenium-server-standalone-2.42.1.jar
  # - java -jar selenium-server-standalone-2.42.1.jar > /dev/null 2>&1 &
  # - sleep 5

  # Disable sendmail
  - echo sendmail_path=`which true` >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini

  # Enable APC
  - echo "extension=apc.so" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
  - echo "apc.shm_size=256M" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini

  # Increase the MySQL connection timeout on the PHP end.
  - echo "mysql.connect_timeout=3000" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
  - echo "default_socket_timeout=3000" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini

  # Increase the MySQL server timeout and packet size.
  - mysql -e "SET GLOBAL wait_timeout = 36000;"
  - mysql -e "SET GLOBAL max_allowed_packet = 33554432;"

before_script:

  # Do the site install (either the current revision or old for the upgrade).
  - drush si checkpoint --db-url=mysql://root:@127.0.0.1/drupal --account-name=admin --account-pass=admin --account-mail=admin@test.com --site-mail=noreply@test.com --site-name="Checkpoint" --yes
  - drush cc drush

  # Configure the private and temporary file systems.
  - drush vset -y file_private_path "sites/default/private/files"
  - drush vset -y file_temporary_path "sites/default/private/temp"

  # Enabled all non-default commons modules so that they can be tested.
  # - drush pm-enable commons_documents commons_notices --yes

  # Forcefully rebuild the Commons Documents feature until
  # https://drupal.org/node/1920342 is fixed.
  - drush features-revert-all --force -y

  # Run the server
  - drush runserver --server=builtin 8888 > /dev/null 2>&1 &
  - SERVER_PID=$!
  - sleep 3
  # - cd profiles/commons/tests/behat

  # Make the Travis tests repos agnostic by injecting drupal_root with BEHAT_PARAMS
  # - BUILD_OWNER=`dirname $TRAVIS_BUILD_DIR`
  # - export BEHAT_PARAMS="extensions[Drupal\\DrupalExtension\\Extension][drupal][drupal_root]=$BUILD_OWNER/drupal"

script:

  # If this isn't an upgrade, we test if any features are overridden.
  # - if [[ "$UPGRADE" == none ]]; then bash ../../scripts/check-overridden.sh; fi

  # First, run all the tests in Firefox.
  # - ./bin/behat --config behat.travis.yml

  # Then run some Chrome-only tests.
  # - ./bin/behat --config behat.travis.yml -p chrome  

  # Detecting duplicate code in PHP files
  - phpcpd --names *.module,*.inc,*.test profiles/modules/features/administration
  - phpcpd --names *.module,*.inc,*.test profiles/modules/features/audit
  - phpcpd --names *.module,*.inc,*.test profiles/modules/features/blocks
  - phpcpd --names *.module,*.inc,*.test profiles/modules/features/common
  - phpcpd --names *.module,*.inc,*.test profiles/modules/features/contexts
  - phpcpd --names *.module,*.inc,*.test profiles/modules/features/development
  - phpcpd --names *.module,*.inc,*.test profiles/modules/features/digital_assets
  - phpcpd --names *.module,*.inc,*.test profiles/modules/features/displays
  - phpcpd --names *.module,*.inc,*.test profiles/modules/features/forms
  - phpcpd --names *.module,*.inc,*.test profiles/modules/features/lifecycle
  - phpcpd --names *.module,*.inc,*.test profiles/modules/features/migration
  - phpcpd --names *.module,*.inc,*.test profiles/modules/features/multilingual
  - phpcpd --names *.module,*.inc,*.test profiles/modules/features/secure
  - phpcpd --names *.module,*.inc,*.test profiles/modules/features/web_services

  # Drupal code reviews
  - drush coder-review --reviews=production,security,style,i18n,potx,sniffer --no-empty administration
  - drush coder-review --reviews=production,security,style,i18n,potx,sniffer --no-empty audit
  - drush coder-review --reviews=production,security,style,i18n,potx,sniffer --no-empty authentication
  - drush coder-review --reviews=production,security,style,i18n,potx,sniffer --no-empty blocks
  - drush coder-review --reviews=production,security,style,i18n,potx,sniffer --no-empty common
  - drush coder-review --reviews=production,security,style,i18n,potx,sniffer --no-empty contexts
  - drush coder-review --reviews=production,security,style,i18n,potx,sniffer --no-empty development
  - drush coder-review --reviews=production,security,style,i18n,potx,sniffer --no-empty digital_assets
  - drush coder-review --reviews=production,security,style,i18n,potx,sniffer --no-empty displays
  - drush coder-review --reviews=production,security,style,i18n,potx,sniffer --no-empty forms
  - drush coder-review --reviews=production,security,style,i18n,potx,sniffer --no-empty lifecycle
  - drush coder-review --reviews=production,security,style,i18n,potx,sniffer --no-empty migration
  - drush coder-review --reviews=production,security,style,i18n,potx,sniffer --no-empty multilingual
  - drush coder-review --reviews=production,security,style,i18n,potx,sniffer --no-empty secure
  - drush coder-review --reviews=production,security,style,i18n,potx,sniffer --no-empty web_services

  # Run all the Drupal unit tests
  - php scripts/run-tests.sh --url http://127.0.0.1:8888/ --verbose --color --all --concurrency 4 --php `which php` | tee /tmp/test.txt ; export TEST_EXIT=${PIPESTATUS[0]} ; echo $TEST_EXIT

  # Also make the grep case insensitive and fail on run-tests.sh regular fails as well on fatal errors.
  - TEST_OUTPUT=$(! egrep -i "([0-9]+ fails)|(PHP Fatal error)|([0-9]+ exceptions)" /tmp/test.txt > /dev/null)$?

after_script:

  # Stop the webserver so that it's not still running when MySQL is stopped.
  - kill $SERVER_PID
  
  # Exit the build
  - echo $TEST_EXIT
  - echo $TEST_OUTPUT
  - echo $TEST_PHPUNIT
  - if [ $TEST_EXIT -eq 0 ] && [ $TEST_OUTPUT -eq 0 ] && [ $TEST_PHPUNIT -eq 0 ]; then exit 0; else exit 1; fi  

notifications:
  slack:
    secure: LfNqvOikFofKutFRPqZLVJF0gMWYPNlDpOGlHEZ3Zb9BJQl3EtnVWZSczJDySrTymOdFPr6VpdmjgoZokKk8s73fER9I4VYRGBsNWNYJ0s/xs/1kOvhbMhVP6QNPTKVMvr+iC7dnsSCcssKXUfwDybi6dxtCQdK0jaewIkN5/TmYHTTiRIo5YVmam9XKoimFypixKTlIAKczBxlajehejUGTHULZBiUdh1wMdizSInzJH2lwWHcRvVY9WW+ntSBXRRe0nErgXZMBQWJMfq0yT2RUmYUlmAFv7FSkAJNpScBFU6Tw2BkMrx67appcjcLM/3fr2Sml5rTzigSbrx7FDpEcrFSA0XnuaXSVu3lBz23WZkVL3XU0D2OwgQ0z00hh0mpzAw235n9l7L0YOcI50XLTp5WbQBndeguEf0/qxvmXK7q0bQbcSSojNdv3+Y5lXwJ+mT4yktsZ5oGnTcZIITwuUtglquSgOlvsPqWKlxDIkygyvBi0tX9Mv80ChpGIqCKJCz0l4Y/AGle30VA0Zx6qLzpYowp8G5vq9P2qoYxgFNvUeh6RwwwnH16YNhzrJwWnKIvnXIk46cyb7MP26qkahNHeRTxtldAFWdjoW7NCtwdxO8hFkjmWp0vXZb0okRd8Isd3Rq70O4oks/tiORQvFoPAkCn/2C7r0YIAElg=

deploy:
  provider: releases
  api_key:
    secure: s3EHqGeIDUdZQE7CuBfElNHKktPWHQv4cwVTHCIy3D7+v9/T7xScg3OCNd9BatEa6TlEYvmsd0MqQZhXvi8nVJl8jZ3cyjg3EGzltSRfbDfOtXlQf25r+is/nuq28uT4K8ggs4ejf3Z32KET2k8ZgnyR0qykRfGesKa2QNJWcSduifxsX9LGQAKdrktiY5LFLTaauRv2BbfNPoGeXA4D14AptQlJzuKqkeGqqMRNbCdIP2iTdxeebRsDFeT8CkqOkYjdsQDF/21tDrfOGvwVY8ZjJci7GFA0mlV5zXyP1+IQg6jy/fVwNkIjdwWNYwMwyjjtlfX9dhOm1iWzec76+USjydNU6Dk0hTDclZ7xMYHeG0tTFJeYqWeoFkd1QeKtUw8yO6OB0u37Rke/SfXHSQCTLWMj9VWQJe1Kd73/9i8hbzA5v4lgWbC9gcMJEUSajVTItoPoaXm01oWALVI+C0xw9uh8FThNRqF/Ob9+f9l+Kk94vvK0KtOckBXx9Hutne21EsOT7ungMdiXMmAflLVsIEWdOmvlhi5Qw4MsgGUgya4NeVWlpymHbSAQKNL4SEFpVD0YoVqXF5cIHQ8ZtjfsXBbxFng+gDqm7zbXbyo14Lvzh1fyM3/j01ASuxRa+Hw+Qo194jE0VzIlvtM2b0YkcXB+w4FPmXZb+xbwBOY=  
  skip_cleanup: true
  on:
    repo: OPIN-CHECKPOINT/opin-checkpoint
    # branch: staging